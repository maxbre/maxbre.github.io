library(leafem)
col_names <- read_table('../calmet/prtmet.dat', skip= 1, n_max = 0)%>% names()%>% tolower()
read_table('./results/prtmet.dat', skip= 1, n_max = 0)%>% names()%>% tolower()
library(tidyverse)
read_table('./results/prtmet.dat', skip= 1, n_max = 0)%>% names()%>% tolower()
read_table('../calmet/prtmet.dat', skip= 1, n_max = 0)%>% names()%>% tolower()
read_table('./results/prtmet.dat', skip= 1, n_max = 0)%>% names()%>% tolower()
install.packages(c("backports", "callr", "colourpicker", "covr", "DescTools", "forecast", "globals", "htmlTable", "jsonlite", "lmtest", "pagedown", "rgeos", "RNetCDF", "sf", "shinyjs", "stringi", "systemfonts", "tmap", "uroot", "xfun", "xlsx", "xts"))
# read headings, i.e. col names
col_names <- read_table('./results/prtmet.dat', skip= 1, n_max = 0)%>% names()%>% tolower()
sync(list(map_avg_v, map_p98_v, map_p99_v, map_max_v),
ncol = 1)
library(leafsync)
sync(list(map_avg_v, map_p98_v, map_p99_v, map_max_v),
ncol = 1)
library(tidyverse)
library(lubridate)
library(magrittr)
#setwd('./')
# read headings, i.e. col names
col_names <- read_table('./results/prtmet.dat', skip= 1, n_max = 0)%>% names()%>% tolower()
# read data, skip row and specify col names
# pay attention here to read_table2 which is very like read.table
# read_table2 allows for any number of whitespaces, read_table not
# it is more strict, each line must be the same length,
# and each field is in the same position in every line.
# It first finds empty columns and then parses like a fixed width file.
met<-read_table2('./results/prtmet.dat', col_names= col_names, skip=4)
# create and format date column
#met$date<-as.POSIXct(strptime(paste0(met$year_1,'-',met$month_1,'-',met$day_1, ' ', met$hour_1),'%Y-%m-%d %H'))
# the same with lubridate
met$date<-ymd_h(paste0(met$year_1,'-',met$month_1,'-',met$day_1, ' ', met$hour_1))
#delete last row (april)
met<-met[-nrow(met),]
library(openair)
windRose(met,
paddle=FALSE,
cols='jet',
ws.int=0.5,
breaks=5,
#c(0,0.5,2,4,max(met$ws)),
angle=22.5,
key.position = 'right',
annotate =FALSE,
grid.line = 10,
type='month')
library(knitr)
#stat for wind
wsst<-met %>%
group_by(month=factor(format(date, '%m'))) %>%
summarise(n=n(),
mean=mean(ws),
sd=sd(ws),
min=min(ws),
max=max(ws),
median=median(ws)
)
kable(wsst, digit=1)
myfac<-cut(met$ws,
#c(seq(0, 6, 0.5), max(met$ws)),
c(0, 0.5, 1, 2, 3, 6, max(met$ws)),
labels=c('< 0.5','[ 0.5, 1 )','[ 1, 2 )','[ 2, 3 )','[ 3, 6 )','>= 6'),
include.lowest=TRUE, right=FALSE)
#frequency distribution of wind classes
wsfd<-met %>%
mutate(recs_all=n())%>%
group_by(class=myfac) %>%
summarise(recs=n(),
perc=recs/first(recs_all)*100)
#kable(wsfd, digit=1)
ggplot(wsfd, aes(x=class, y=perc, fill=class))+
geom_col()+
geom_text(aes(label=round(perc,1)), vjust=-0.3, size=3.5)+
ylim(0,100)+
#scale_y_continuous('%', limits=c(0,100))+
labs(title='distribuzione di frequenza classi velocit√† vento',
y='frequenza %',
x='classi',
fill = "m/s")
ggplot(met, aes(x=factor(format(date, '%H')), y=mix.hgt)) +
geom_point(alpha=0.3)+
#geom_boxplot()+
#geom_smooth(aes(group=1))+
stat_summary(aes(group=1), # dummy group all points
fun='mean', colour='red', size=0.75, geom='line')+
facet_grid(~factor(format(date, '%m-%y')))+
xlab('ora')+
ylab('Hmix [m]')+
ylim(0,2500)+
scale_x_discrete(breaks=c('00','08','16'))
plot_calpuff_map<-function(input_filename,
name_of_map_layer){
# by first strip the dot from coordinates headings from the original esri grid files produced by calpuff/calpost
# in order to set coordinates in meters (and not in km as per calpuff style)
l<-readLines(input_filename)
l[3:4]<-gsub('\\.', '', l[3:4]) #gsub('[.]', '', l[3:4])
#fname<-paste0(strsplit(input_filename,'\\.grd$'),'_meters', '.grd')
fext<-tools::file_ext(input_filename)
fpath<-tools::file_path_sans_ext(input_filename)
#compose filename with new unit measures
fname_new<-paste0(fpath,'_coord_meters.', fext)
writeLines(l, fname_new)
#read grd file
plt<-rgdal::readGDAL(fname_new)
# string WGS 84 / UTM zone 32N cartesian
epsg_in<-'+init=epsg:32632'
# set original coordinates system
sp::proj4string(plt) <- sp::CRS(epsg_in)
# set it as a grid
#sp::gridded(plt)<-TRUE
# convert to a raster
pltr <- raster::raster(plt)
map_r<-mapview::mapview(pltr,
#here define the palette
col.regions = grDevices::colorRampPalette(rev(RColorBrewer::brewer.pal(8, 'RdYlBu'))),
#at = my_bins,
na.color ='transparent',
alpha.region= 0.5,
legend.opacity=0.5,
#query.digits=1,
query.position = 'bottomright',
#query.prefix = NULL,
layer.name = name_of_map_layer,
map.types = c('CartoDB.Positron','OpenStreetMap','Esri.WorldImagery')
)
map_r
}
#map calpuff area
map_avg_ca<-plot_calpuff_map('./results/calpuff_area_sources_szinit_0/rank(0)_odor_8760hr_conc.grd',
'CALPUFF - odore [uoE*m-3]<br>avg period, PMR = 2.3')
map_p98_ca<-plot_calpuff_map('./results/calpuff_area_sources_szinit_0/rank(176)_odor_1hr_conc.grd',
'CALPUFF - odore [uoE*m-3]<br>P98 1h, PMR = 2.3')
map_p99_ca<-plot_calpuff_map('./results/calpuff_area_sources_szinit_0/rank(88)_odor_1hr_conc.grd',
'CALPUFF - odore [uoE*m-3]<br>P99 1h, PMR = 2.3')
map_max_ca<-plot_calpuff_map('./results/calpuff_area_sources_szinit_0/rank(1)_odor_1hr_conc.grd',
'CALPUFF - odore [uoE*m-3]<br>max 1h, PMR = 2.3')
library(leafsync)
sync(list(map_avg_ca, map_p98_ca, map_p99_ca, map_max_ca),
ncol = 1)
plot_aermod_map<-function(input_filename,
rows_to_skip,
name_of_map_layer)  {
library(magrittr)
plt<-readr::read_table2(input_filename, col_names=FALSE, skip=rows_to_skip) %>%
dplyr::select(x=1, y=2, z=3)
# coordinates to define a spatial point data frame
sp::coordinates(plt)<- ~x+y
# string WGS 84 / UTM zone 32N cartesian
epsg_in<-'+init=epsg:32632'
# set original coordinates system
sp::proj4string(plt) <- sp::CRS(epsg_in)
# set it as a grid
sp::gridded(plt)<-TRUE
# convert to a raster
pltr <- raster::raster(plt)
# define the binning
#my_bins<-c(0, 1, 2, 3, 4, 5, 10, 100, round(max(raster::values(pltr)),0))
#my_bins<-pretty(range(raster::values(pltr)))
map_r<-mapview::mapview(pltr,
#here define the palette
col.regions = grDevices::colorRampPalette(rev(RColorBrewer::brewer.pal(8, 'RdYlBu'))),
#at = my_bins,
na.color ='transparent',
alpha.region= 0.5,
legend.opacity=0.5,
#query.digits=1,
query.position = 'bottomright',
#query.prefix = NULL,
layer.name = name_of_map_layer,
map.types = c('CartoDB.Positron','OpenStreetMap','Esri.WorldImagery')
)
map_r
}
# map area source
map_avg_a<-plot_aermod_map('./results/aermod_area_sources_szinit_0/PLT_PERIOD_ALL_AVE.PLT',
24,
'AERMOD - odore [uoE*m-3]<br>avg period, PMR = 2.3')
map_p98_a<-plot_aermod_map('./results/aermod_area_sources_szinit_0/PLT_PERIOD_ALL_176_P98.PLT',
24,
'AERMOD - odore [uoE*m-3]<br>P98 1h, PMR = 2.3')
map_p99_a<-plot_aermod_map('./results/aermod_area_sources_szinit_0/PLT_PERIOD_ALL_88_P99.PLT',
24,
'AERMOD - odore [uoE*m-3]<br>P99 1h, PMR = 2.3')
map_max_a<-plot_aermod_map('./results/aermod_area_sources_szinit_0/PLT_PERIOD_ALL_1_MAX.PLT',
24,
'AERMOD - odore [uoE*m-3]<br>max 1h, PMR = 2.3')
# map volume source
map_avg_v<-plot_aermod_map('./results/aermod_volume_sources_szinit_0_syinit_0/PLT_PERIOD_ALL_AVE.PLT',
24,
'AERMOD - odore [uoE*m-3]<br>avg period, PMR = 2.3')
map_p98_v<-plot_aermod_map('./results/aermod_volume_sources_szinit_0_syinit_0/PLT_PERIOD_ALL_176_P98.PLT',
24,
'AERMOD - odore [uoE*m-3]<br>P98 1h, PMR = 2.3')
map_p99_v<-plot_aermod_map('./results/aermod_volume_sources_szinit_0_syinit_0/PLT_PERIOD_ALL_88_P99.PLT',
24,
'AERMOD - odore [uoE*m-3]<br>P99 1h, PMR = 2.3')
map_max_v<-plot_aermod_map('./results/aermod_volume_sources_szinit_0_syinit_0/PLT_PERIOD_ALL_1_MAX.PLT',
24,
'AERMOD - odore [uoE*m-3]<br>max 1h, PMR = 2.3')
sync(list(map_avg_a, map_p98_a, map_p99_a, map_max_a),
ncol = 1)
#map_avg_a
#map_p98_a
#map_p99_a
#map_max_a
library(leafsync)
sync(list(map_avg_v, map_p98_v, map_p99_v, map_max_v),
ncol = 1)
#map_avg_v
#map_p98_v
#map_p99_v
#map_max_v
install.packages(c("bibtex", "broom", "cpp11", "depigner", "devtools", "Exact", "future", "geojsonsf", "gplots", "htmlwidgets", "igraph", "knitr", "leafpop", "matrixStats", "multcomp", "openair", "openssl", "ps", "Rdpack", "readr", "rgdal", "rmarkdown", "RPostgres", "sandwich", "servr", "shinyWidgets", "sp", "systemfonts", "tinytex", "tufte", "usethis", "vcd", "withr", "xaringan", "xfun"))
